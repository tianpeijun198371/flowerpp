package com.ulearning.ulms.content.schoolbook.model.dao;

import com.ulearning.ulms.content.schoolbook.bean.OutStoreMessageView;
import com.ulearning.ulms.content.schoolbook.bean.StoreItemView;
import com.ulearning.ulms.content.schoolbook.bean.StoreMessageBean;
import com.ulearning.ulms.content.schoolbook.bean.StoreMessageViewBean;
import com.ulearning.ulms.content.schoolbook.model.MTeachstorItemTab;
import com.ulearning.ulms.content.schoolbook.model.base.BaseMTeachstorItemTabDAO;
import com.ulearning.ulms.content.schoolbook.util.PageWrapper;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 * <p/>
 * This is the object class that relates to the M_TEACHSTOR_ITEM_TAB table.
 * Any customizations belong here.
 */
public class MTeachstorItemTabDAO extends BaseMTeachstorItemTabDAO
{
        private static final Log log = LogFactory.getLog(MTeachstorItemTabDAO.class);

        public MTeachstorItemTabDAO()
        {
                log.debug("initialize!!");

                try
                {
                        initialize();
                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }
        }

        public static void main(String[] arg)
        {
                MTeachstorItemTabDAO dao = MTeachstorItemTabDAO.getInstance();

                try
                {
                        System.out.println(dao.findAll().size());
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
        }

        //´æ´¢Ã÷Îú×é
        public void saveStoreItem(StoreMessageViewBean store, List messageList)
        {
                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; (messageList != null) && (i < messageList.size());
                             i++)
                        {
                                StoreMessageBean smb = (StoreMessageBean) messageList.get(i);
                                MTeachstorItemTab mit = new MTeachstorItemTab();
                                BeanUtils.copyProperties(mit, smb);
                                mit.setBsifid(new Integer(Integer.parseInt("" +
                                        smb.getInfoId())));
                                mit.setTcmainid(store.getTcmainid());
                                mit.setTcitemprice(smb.getBsifprice().floatValue());
                                mit.setTcitemsupplierid(store.getTcitemsupplierid());
                                mit.setTcitemsuppliername(store.getTcitemsuppliername());

                                /*System.out.println("**********************Start MTeachstorItemTab***********************");
                               System.out.println(mit);
                               System.out.println("**********************End MTeachstorItemTab*************************");*/
                                try
                                {
                                        save(mit, s);
                                        s.flush();
                                }
                                catch (Exception e)
                                {
                                        System.out.println("SAVE Exception:" + e);
                                }
                        }

                        tx.commit();
                }
                catch (Exception e)
                {
                        if (null != tx)
                        {
                                try
                                {
                                        tx.rollback();
                                }
                                catch (HibernateException e1)
                                {
                                        System.out.println(
                                                "error of saveStoreItem, Transaction rollback and Exception is: \r\n" +
                                                        e);
                                }
                        }

                        System.out.println("saveStoreItem Exception:\r\n" + e);
                }
                finally
                {
                        try
                        {
                                //s.disconnect();
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }
        }

        public void saveStoreItem(OutStoreMessageView store, List messageList)
        {
                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; (messageList != null) && (i < messageList.size());
                             i++)
                        {
                                StoreMessageBean smb = (StoreMessageBean) messageList.get(i);
                                MTeachstorItemTab mit = new MTeachstorItemTab();
                                BeanUtils.copyProperties(mit, smb);
                                mit.setBsifid(new Integer(Integer.parseInt("" +
                                        smb.getInfoId())));
                                mit.setTcmainid(store.getTcmainid());
                                mit.setTcitemprice(smb.getBsifprice().floatValue());
                                mit.setTcitemtclientid(store.getTcitemtclientid());
                                //mit.setTcitemsupplierid(store.getTcitemsupplierid());
                                mit.setTcitemtclientname(store.getTcitemtclientname());

                                //mit.setTcitemsuppliername(store.getTcitemsuppliername());
                                try
                                {
                                        save(mit, s);
                                        s.flush();
                                }
                                catch (Exception e)
                                {
                                        System.out.println("SAVE Exception:" + e);
                                }
                        }

                        tx.commit();
                }
                catch (Exception e)
                {
                        if (null != tx)
                        {
                                try
                                {
                                        tx.rollback();
                                }
                                catch (HibernateException e1)
                                {
                                        System.out.println(
                                                "error of saveStoreItem, Transaction rollback and Exception is: \r\n" +
                                                        e);
                                }
                        }

                        System.out.println("saveStoreItem Exception:\r\n" + e);
                }
                finally
                {
                        try
                        {
                                //s.disconnect();
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }
        }

        public String getViewHQL()
        {
                return "select item.id, item.tcmainid, item.bsifbookname, " +
                        "item.tcitemprice, item.tcitemquantity, item.tcitemtotal, main.tcmaintran," +
                        "main.tcmainuser, main.tcmaindate from MTeachmainstor main,MTeachstorItemTab item" +
                        " where 1=1 and item.tcmainid=main.id and main.inmainmark=:imainmark";
        }

        public int countSum(String mark)
        {
                int sum = 0;

                if (getViewHQL() != null)
                {
                        sum = count("from MTeachmainstor main,MTeachstorItemTab item" +
                                " where 1=1 and item.tcmainid=main.id and main.inmainmark=" +
                                mark, null);
                }

                return sum;
        }

        private Query createViewQuery(Integer imainMark)
        {
                Query q = null;
                Session s = null;

                try
                {
                        s = getSession();
                        q = s.createQuery(getViewHQL());
                        q.setParameter("imainmark", imainMark);
                }
                catch (HibernateException e)
                {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }

                return q;
        }

        //imainMark:³ö¿âÈë¿â±ê¼Ç
        public PageWrapper getPage(String index, String count, Integer imainMark)
        {
                log.debug("single page");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);

                List list = list(countPerPage, currentPage, createViewQuery(imainMark));

                //System.out.println(list.size());
                PageWrapper page = PageWrapper.getPage(index, countPerPage,
                        countSum(imainMark.toString()));
                page.setList(conversionResult(list));

                return page;
        }

        //Èë¿âÃ÷Îú·ÖÒ³²éÑ¯ÁÐ±í
        public PageWrapper getStoreItemPage(String index, String count, Map args)
        {
                log.debug("inside store item page");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);

                List list = list(countPerPage, currentPage, createSearchQuery(args));

                //System.out.println(list.size());
                PageWrapper page = PageWrapper.getPage(index, countPerPage,
                        searchCountSum(args));
                page.setList(conversionResult(list));

                return page;
        }

        //³ö¿âÃ÷Îú·ÖÒ³²éÑ¯ÁÐ±í
        public PageWrapper getOutStoreItemPage(String index, String count,
                                               Map args, int iMark)
        {
                log.debug("inside store item page");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);

                List list = list(countPerPage, currentPage,
                        createSearchQuery(args, iMark));

                //System.out.println(list.size());
                PageWrapper page = PageWrapper.getPage(index, countPerPage,
                        searchCountSum(args, iMark));
                page.setList(conversionResult(list));

                return page;
        }

        private Query createSearchQuery(Map args, int iMark)
        {
                Query q = null;
                Session s = null;

                try
                {
                        s = getSession();

                        String hql = "select item.id, item.tcmainid, item.bsifbookname, " +
                                "item.tcitemprice, item.tcitemquantity, item.tcitemtotal, main.tcmaintran," +
                                "main.tcmainuser, main.tcmaindate from MTeachmainstor main,MTeachstorItemTab item" +
                                " where 1=1 and item.tcmainid=main.id and main.inmainmark=" +
                                iMark;

                        if (args.containsKey("bsifbookname"))
                        {
                                hql = hql + " and item.bsifbookname='" +
                                        args.get("bsifbookname") + "'";
                        }

                        if (args.containsKey("tcmaintran"))
                        {
                                hql = hql + " and main.tcmaintran='" + args.get("tcmaintran") +
                                        "'";
                        }

                        if (args.containsKey("tcmainuser"))
                        {
                                hql = hql + " and main.tcmainuser='" + args.get("tcmainuser") +
                                        "'";
                        }

                        if (args.containsKey("tcmaindate"))
                        {
                                try
                                {
                                        hql = hql + " and year(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(0, 4);
                                        hql = hql + " and month(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(5, 7);
                                        hql = hql + " and day(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(8, 10);
                                }
                                catch (Exception e)
                                {
                                        log.error("error of the date format!!");
                                        e.printStackTrace();
                                }
                        }

                        q = s.createQuery(hql);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return q;
        }

        private Query createSearchQuery(Map args)
        {
                Query q = null;
                Session s = null;

                try
                {
                        s = getSession();

                        String hql = "select item.id, item.tcmainid, item.bsifbookname, " +
                                "item.tcitemprice, item.tcitemquantity, item.tcitemtotal, main.tcmaintran," +
                                "main.tcmainuser, main.tcmaindate from MTeachmainstor main,MTeachstorItemTab item" +
                                " where 1=1 and item.tcmainid=main.id and main.inmainmark=1";

                        if (args.containsKey("bsifbookname"))
                        {
                                hql = hql + " and item.bsifbookname='" +
                                        args.get("bsifbookname") + "'";
                        }

                        if (args.containsKey("tcmaintran"))
                        {
                                hql = hql + " and main.tcmaintran='" + args.get("tcmaintran") +
                                        "'";
                        }

                        if (args.containsKey("tcmainuser"))
                        {
                                hql = hql + " and main.tcmainuser='" + args.get("tcmainuser") +
                                        "'";
                        }

                        if (args.containsKey("tcmaindate"))
                        {
                                try
                                {
                                        hql = hql + " and year(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(0, 4);
                                        hql = hql + " and month(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(5, 7);
                                        hql = hql + " and day(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(8, 10);
                                }
                                catch (Exception e)
                                {
                                        log.error("error of the date format!!");
                                        e.printStackTrace();
                                }
                        }

                        q = s.createQuery(hql);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return q;
        }

        public int searchCountSum(Map args, int iMark)
        {
                int sum = 0;

                try
                {
                        String hql = "from MTeachmainstor main,MTeachstorItemTab item" +
                                " where 1=1 and item.tcmainid=main.id and main.inmainmark=" +
                                iMark;

                        if (args.containsKey("bsifbookname"))
                        {
                                hql = hql + " and item.bsifbookname='" +
                                        args.get("bsifbookname") + "'";
                        }

                        if (args.containsKey("tcmaintran"))
                        {
                                hql = hql + " and main.tcmaintran='" + args.get("tcmaintran") +
                                        "'";
                        }

                        if (args.containsKey("tcmaindate"))
                        {
                                try
                                {
                                        hql = hql + " and year(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(0, 4);
                                        hql = hql + " and month(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(5, 7);
                                        hql = hql + " and day(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(8, 10);
                                }
                                catch (Exception e)
                                {
                                        log.error("error of the date format!!");
                                }
                        }

                        sum = count(hql, null);
                }
                catch (Exception e)
                {
                        log.error("error of the search count!!");
                        e.printStackTrace();
                }

                return sum;
        }

        public int searchCountSum(Map args)
        {
                int sum = 0;

                try
                {
                        String hql = "from MTeachmainstor main,MTeachstorItemTab item" +
                                " where 1=1 and item.tcmainid=main.id and main.inmainmark=1";

                        if (args.containsKey("bsifbookname"))
                        {
                                hql = hql + " and item.bsifbookname='" +
                                        args.get("bsifbookname") + "'";
                        }

                        if (args.containsKey("tcmaintran"))
                        {
                                hql = hql + " and main.tcmaintran='" + args.get("tcmaintran") +
                                        "'";
                        }

                        if (args.containsKey("tcmaindate"))
                        {
                                try
                                {
                                        hql = hql + " and year(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(0, 4);
                                        hql = hql + " and month(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(5, 7);
                                        hql = hql + " and day(main.tcmaindate)=" +
                                                args.get("tcmaindate").toString().substring(8, 10);
                                }
                                catch (Exception e)
                                {
                                        log.error("error of the date format!!");
                                }
                        }

                        sum = count(hql, null);
                }
                catch (Exception e)
                {
                        log.error("error of the search count!!");
                        e.printStackTrace();
                }

                return sum;
        }

        //·ÖÒ³Ìõ¼þ²éÑ¯
        private List list(int count, int index, Query query)
        {
                log.debug("inside list!");

                List list = null;

                try
                {
                        if (index > 0)
                        {
                                query.setFirstResult((index - 1) * count);
                        }

                        if (count > 0)
                        {
                                query.setMaxResults(count);
                        }

                        list = query.setCacheable(true).list();
                }
                catch (Exception ex)
                {
                        log.error("RootDAO list error !!", ex);
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                // ignore
                        }
                }

                return list;
        }

        private List conversionResult(List list)
        {
                List result = null;

                if (list != null)
                {
                        result = new ArrayList();

                        for (int i = 0; i < list.size(); i++)
                        {
                                Object[] obj = (Object[]) list.get(i);

                                try
                                {
                                        result.add(buildArray(obj));
                                }
                                catch (Exception e)
                                {
                                        System.out.println("Build StoreItemView Exception:\r\n" +
                                                e.toString());
                                }
                        }
                }

                return result;
        }

        //	Ã÷Ï¸ID
        //private Integer tcitemid;
        //³öÈë¿âÖ÷µ¥¹ÜÀíID
        //private Integer tcmainid;
        //½Ì²ÄÃû³Æ
        //private String bsifbookname;
        //½Ì²Äµ¥¸ñ
        //private Float tcitemprice;
        //³öÈë¿âÊýÁ¿
        //private Integer tcitemquantity;
        //ºÏ¼Æ½ð¶î
        //private Integer tcitemtotal;
        //¾­°ìÈË(Èë¿â)
        //private String tcmaintran;
        //ÁìÓÃÈË£¨³ö¿â£©
        //private String tcmainuser;
        //³öÈë¿âÈÕÆÚ
        //private Date tcmaindate;
        //ÓÉÊý×é°ó¶¨µ½StoreItemView
        private StoreItemView buildArray(Object[] obj)
        {
                StoreItemView view = new StoreItemView();

                if (obj.length != 9)
                {
                        return null;
                }

                if (obj[0] != null)
                {
                        view.setTcitemid(new Integer(obj[0].toString()));
                }

                if (obj[1] != null)
                {
                        view.setTcmainid(new Integer(obj[1].toString()));
                }

                view.setBsifbookname((String) obj[2]);

                if (obj[3] != null)
                {
                        view.setTcitemprice(new Float(obj[3].toString()));
                }

                if (obj[4] != null)
                {
                        view.setTcitemquantity(new Integer(obj[4].toString()));
                }

                if (obj[5] != null)
                {
                        view.setTcitemtotal(new Float(obj[5].toString()));
                }

                view.setTcmaintran((String) obj[6]);
                view.setTcmainuser((String) obj[7]);

                if (obj[8] != null)
                {
                        view.setTcmaindate((Date) obj[8]);
                }

                return view;
        }

        //É¾³ýid×éµÄÃ÷Îú
        public void deleteItems(String[] ids)
        {
                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; i < ids.length; i++)
                        {
                                delete(Long.parseLong(ids[i]), s);
                                s.flush();
                        }

                        tx.commit();
                }
                catch (HibernateException e)
                {
                        try
                        {
                                if (null != tx)
                                {
                                        tx.rollback();
                                }
                        }
                        catch (HibernateException e1)
                        {
                                // TODO Auto-generated catch block
                                e1.printStackTrace();
                        }

                        e.printStackTrace();
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                }
        }
}
