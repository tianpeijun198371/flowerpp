package com.ulearning.ulms.content.schoolbook.model.dao;

import com.ulearning.ulms.content.schoolbook.bean.StoreBean;
import com.ulearning.ulms.content.schoolbook.exceptions.ActionSchoolbookException;
import com.ulearning.ulms.content.schoolbook.model.MTeachsort;
import com.ulearning.ulms.content.schoolbook.model.MTeachstorItemTab;
import com.ulearning.ulms.content.schoolbook.model.base.BaseMTeachsortDAO;
import com.ulearning.ulms.content.schoolbook.util.PageWrapper;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.lang.reflect.InvocationTargetException;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 * <p/>
 * This is the object class that relates to the M_TEACHSORT table.
 * Any customizations belong here.
 */
public class MTeachsortDAO extends BaseMTeachsortDAO
{
        private static final Log log = LogFactory.getLog(MTeachsortDAO.class);
        private static final MTeachstorItemTabDAO itemdao = MTeachstorItemTabDAO.getInstance();

        public MTeachsortDAO()
        {
                log.debug("initialize");

                try
                {
                        initialize();
                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }
        }

        //事物中的单条入库增加
        private void inStoreAdd(Integer id, Session s)
        {
                try
                {
                        MTeachstorItemTab item = getItem(id, s);
                        MTeachsort sort = new MTeachsort();
                        //System.out.println(item);
                        BeanUtils.copyProperties(sort, item);
                        sort.setTcstprice(new Float(item.getTcitemprice()));
                        sort.setTcstquantity(item.getTcitemquantity());
                        sort.setTcsttotal(new Float(item.getTcitemtotal()));
                        save(sort, s);
                        s.flush();
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
                catch (IllegalAccessException e)
                {
                        e.printStackTrace();
                }
                catch (InvocationTargetException e)
                {
                        e.printStackTrace();
                }
        }

        //事物中的单条入库更新
        private void inStoreUpdate(Integer id, Session s)
        {
                try
                {
                        MTeachstorItemTab item = getItem(id, s);
                        MTeachsort sort = null;
                        List list = find("from MTeachsort as mt where mt.bsifid=" +
                                item.getBsifid(), s);
                        s.flush();

                        if (list.size() > 0)
                        {
                                sort = (MTeachsort) list.get(0);
                        }

                        resultBuild(item, sort);
                        //System.out.println(sort);
                        update(sort, s);
                        s.flush();
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
        }

        //	事物中的单条出库更新
        private void outStoreUpdate(Integer id, Session s)
        {
                try
                {
                        MTeachstorItemTab item = getItem(id, s);
                        MTeachsort sort = null;
                        List list = find("from MTeachsort as mt where mt.bsifid=" +
                                item.getBsifid(), s);
                        s.flush();

                        if (list.size() > 0)
                        {
                                sort = (MTeachsort) list.get(0);
                        }

                        resultBuildOut(item, sort);
                        //System.out.println(sort);
                        update(sort, s);
                        s.flush();
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
        }

        //单条入库更新
        public void inStoreUpdate(Integer id)
        {
                log.debug("inside store update!!");

                try
                {
                        MTeachstorItemTab item = getItem(id);
                        MTeachsort sort = null;
                        List list = find("from MTeachsort as mt where mt.bsifid=" +
                                item.getBsifid());

                        if (list.size() > 0)
                        {
                                sort = (MTeachsort) list.get(0);
                        }

                        resultBuild(item, sort);
                        //System.out.println(sort);
                        update(sort);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
        }

        //单条出库更新
        public void outStoreUpdate(Integer id)
        {
                log.debug("inside out store update!!");

                try
                {
                        MTeachstorItemTab item = getItem(id);
                        MTeachsort sort = null;
                        List list = find("from MTeachsort as mt where mt.bsifid=" +
                                item.getBsifid());

                        if (list.size() > 0)
                        {
                                sort = (MTeachsort) list.get(0);
                        }

                        resultBuildOut(item, sort);
                        //System.out.println(sort);
                        update(sort);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
        }

        //教材出库计算(数量和总价)
        private MTeachsort resultBuildOut(MTeachstorItemTab item, MTeachsort sort)
        {
                int iquantity = sort.getTcstquantity().intValue() -
                        item.getTcitemquantity().intValue();
                float ftcsttotal = sort.getTcsttotal().floatValue() -
                        item.getTcitemtotal();
                sort.setTcstquantity(new Integer(iquantity));
                sort.setTcsttotal(new Float(ftcsttotal));

                return sort;
        }

        //相同教材入库计算(数量和总价)
        private MTeachsort resultBuild(MTeachstorItemTab item, MTeachsort sort)
        {
                int iquantity = item.getTcitemquantity().intValue() +
                        sort.getTcstquantity().intValue();
                float ftcsttotal = item.getTcitemtotal() +
                        sort.getTcsttotal().floatValue();
                sort.setTcstquantity(new Integer(iquantity));
                sort.setTcsttotal(new Float(ftcsttotal));

                return sort;
        }

        //单条入库增加
        public void inStoreAdd(Integer id)
        {
                log.debug("inside store add!!");

                try
                {
                        MTeachstorItemTab item = getItem(id);
                        MTeachsort sort = new MTeachsort();
                        //System.out.println(item);
                        BeanUtils.copyProperties(sort, item);
                        sort.setTcstprice(new Float(item.getTcitemprice()));
                        sort.setTcstquantity(item.getTcitemquantity());
                        sort.setTcsttotal(new Float(item.getTcitemtotal()));
                        save(sort);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }
                catch (IllegalAccessException e)
                {
                        e.printStackTrace();
                }
                catch (InvocationTargetException e)
                {
                        e.printStackTrace();
                }
        }

        //多条入库更新或增加
        public void buildStore(String[] ids) throws ActionSchoolbookException
        {
                log.debug("inside build store!!");

                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; (ids != null) && (i < ids.length); i++)
                        {
                                if (isInfo(Integer.parseInt(ids[i]), s))
                                {
                                        inStoreUpdate(new Integer(ids[i]), s);
                                }
                                else
                                {
                                        inStoreAdd(new Integer(ids[i]), s);
                                }

                                s.flush();
                        }

                        tx.commit();
                }
                catch (Exception e)
                {
                        if (null != tx)
                        {
                                try
                                {
                                        tx.rollback();
                                }
                                catch (HibernateException e1)
                                {
                                        System.out.println(
                                                "error of buildStore, Transaction rollback and Exception is: \r\n" +
                                                        e);
                                }
                        }

                        e.printStackTrace();
                        throw new ActionSchoolbookException();
                }
                finally
                {
                        try
                        {
                                //s.disconnect();
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }
        }

        //	多条入库更新或增加
        public void buildOutStore(String[] ids) throws ActionSchoolbookException
        {
                log.debug("inside build store!!");

                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; (ids != null) && (i < ids.length); i++)
                        {
                                if (isInfo(Integer.parseInt(ids[i]), s))
                                {
                                        outStoreUpdate(new Integer(ids[i]), s);
                                }
                                else
                                {
                                        throw new ActionSchoolbookException("教材未在库存中！");
                                }

                                s.flush();
                        }

                        tx.commit();
                }
                catch (Exception e)
                {
                        if (null != tx)
                        {
                                try
                                {
                                        tx.rollback();
                                }
                                catch (HibernateException e1)
                                {
                                        System.out.println(
                                                "error of buildStore, Transaction rollback and Exception is: \r\n" +
                                                        e);
                                }
                        }

                        e.printStackTrace();
                        throw new ActionSchoolbookException();
                }
                finally
                {
                        try
                        {
                                //s.disconnect();
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }
        }

        private MTeachstorItemTab getItem(Integer id) throws HibernateException
        {
                MTeachstorItemTab item = null;
                item = itemdao.load(id.intValue());

                return item;
        }

        private MTeachstorItemTab getItem(Integer id, Session s)
                throws HibernateException
        {
                MTeachstorItemTab item = null;
                item = itemdao.load(id.intValue(), s);
                s.flush();

                return item;
        }

        private boolean isExist(int infoId, Session s)
        {
                List list = null;

                try
                {
                        //list = findAll();
                        list = find("from MTeachsort as mt where mt.bsifid=" + infoId, s);
                        s.flush();

                        //System.out.println(list.size());
                        if ((list != null) && (list.size() > 0))
                        {
                                return true;
                        }
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return false;
        }

        //
        public boolean isInfo(int itemid)
        {
                try
                {
                        MTeachstorItemTab item = getItem(new Integer(itemid));

                        return isExist(item.getBsifid().intValue());
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return false;
        }

        private boolean isInfo(int itemid, Session s)
        {
                try
                {
                        MTeachstorItemTab item = getItem(new Integer(itemid), s);

                        return isExist(item.getBsifid().intValue(), s);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return false;
        }

        //	此教材基本信息是否已被库存
        public boolean isExist(int infoId)
        {
                log.debug("inside isExist!!");

                List list = null;

                try
                {
                        //list = findAll();
                        list = find("from MTeachsort as mt where mt.bsifid=" + infoId);

                        //System.out.println(list.size());
                        if ((list != null) && (list.size() > 0))
                        {
                                return true;
                        }
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return false;
        }

        //此组教材基本信息中是否有已被库存的教材
        public boolean isExist(String[] ids)
        {
                log.debug("inside isExist ids!!");

                if (ids.length == 1)
                {
                        isExist(Integer.parseInt(ids[0]));
                }

                String temp = "";

                for (int i = 0; i < ids.length; i++)
                {
                        temp = temp + ids[i] + ",";
                }

                temp = temp.substring(0, temp.length() - 1);

                String hql = "from MTeachsort as mt where mt.bsifid in(" + temp + ")";

                //System.out.println(hql);
                List list = null;

                try
                {
                        list = find(hql);

                        //System.out.println(list.size());
                        if ((list != null) && (list.size() > 0))
                        {
                                return true;
                        }
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return false;
        }

        //所有库存分页
        public PageWrapper getPage(String index, String count)
        {
                log.debug("single page!!");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);
                List list = list(currentPage, countPerPage, createPageQuery());

                //System.out.println(list.size());
                PageWrapper page = PageWrapper.getPage(index, countPerPage, countSum());
                page.setList(conversionResult(list));

                return page;
        }

        //所有库存总数
        public int countSum()
        {
                int sum = 0;
                sum = count("from MTeachsort", null);

                return sum;
        }

        //查询分页
        public PageWrapper getSearchPage(String index, String count, Map searchMap)
        {
                log.debug("search page!!");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);
                List list = list(currentPage, countPerPage, createSearchQuery(searchMap));
                PageWrapper page = PageWrapper.getPage(index, countPerPage,
                        countSearchSum(searchMap));
                page.setList(conversionResult(list));

                return page;
        }

        private List conversionResult(List list)
        {
                List result = null;

                if (list != null)
                {
                        result = new ArrayList();

                        for (int i = 0; i < list.size(); i++)
                        {
                                //System.out.println(list.get(i).getClass().getName());
                                Object[] obj = (Object[]) list.get(i);

                                //System.out.println("conversion -========================");
                                try
                                {
                                        result.add(buildArray(obj));
                                }
                                catch (Exception e)
                                {
                                        System.out.println("Build StoreBean Exception:\r\n" +
                                                e.toString());
                                }
                        }
                }

                return result;
        }

        private StoreBean buildArray(Object[] obj)
        {
                StoreBean bean = new StoreBean();

                if (obj.length != 8)
                {
                        return null;
                }

                bean.setBsifbookname((String) obj[0]);
                bean.setBsifpublishname((String) obj[1]);

                if (obj[2] != null)
                {
                        bean.setBsifpublishdate((Date) obj[2]);
                }

                bean.setBsifauthor((String) obj[3]);

                if (obj[4] != null)
                {
                        bean.setTcstprice(new Float(obj[4].toString()));
                }

                if (obj[5] != null)
                {
                        bean.setTcsttotal(new Float(obj[5].toString()));
                }

                if (obj[6] != null)
                {
                        bean.setTcstquantity(new Integer(obj[6].toString()));
                }

                if (obj[7] != null)
                {
                        bean.setId(new Integer(obj[7].toString()));
                }

                return bean;
        }

        private Query createPageQuery()
        {
                Query q = null;
                Session s = null;

                try
                {
                        s = getSession();

                        String hql = "select sort.bsifbookname, info.bsifpublishname, info.bsifpublishdate, " +
                                "info.bsifauthor, sort.tcstprice, sort.tcsttotal, sort.tcstquantity, info.id" +
                                " from MTeachsort sort, MTeachbeseinfoTab info where 1=1 and sort.bsifid=info.id";
                        q = s.createQuery(hql);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return q;
        }

        private Query createSearchQuery(Map searchMap)
        {
                Query q = null;
                Session s = null;

                try
                {
                        s = getSession();

                        String hql = "select sort.bsifbookname, info.bsifpublishname, info.bsifpublishdate, " +
                                "info.bsifauthor, sort.tcstprice, sort.tcsttotal, sort.tcstquantity, info.id" +
                                " from MTeachsort sort, MTeachbeseinfoTab info where 1=1 and sort.bsifid=info.id";

                        if (searchMap.containsKey("bsifbookname"))
                        {
                                hql = hql + " and sort.bsifbookname='" +
                                        searchMap.get("bsifbookname") + "'";
                        }

                        if (searchMap.containsKey("bsifpublishname"))
                        {
                                hql = hql + " and info.bsifpublishname='" +
                                        searchMap.get("bsifpublishname") + "'";
                        }

                        if (searchMap.containsKey("tcstprice"))
                        {
                                hql = hql + " and sort.tcstprice=" +
                                        searchMap.get("tcstprice");
                        }

                        if (searchMap.containsKey("bsifauthor"))
                        {
                                hql = hql = " and info.bsifauthor='" +
                                        searchMap.get("bsifauthor") + "'";
                        }

                        q = s.createQuery(hql);
                }
                catch (HibernateException e)
                {
                        e.printStackTrace();
                }

                return q;
        }

        //查询条件
        private List list(int index, int count, Query query)
        {
                log.debug("inside list!");

                List list = null;

                try
                {
                        if (index > 0)
                        {
                                query.setFirstResult((index - 1) * count);
                        }

                        if (count > 0)
                        {
                                query.setMaxResults(count);
                        }

                        list = query.setCacheable(true).list();
                }
                catch (Exception ex)
                {
                        log.error("RootDAO list error !!", ex);
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                // ignore
                        }
                }

                return list;
        }

        //符合条件总数
        private int countSearchSum(Map searchMap)
        {
                int sum = 0;

                try
                {
                        String hql = "from MTeachsort sort, MTeachbeseinfoTab info where 1=1 and sort.bsifid=info.id";

                        if (searchMap.containsKey("bsifbookname"))
                        {
                                hql = hql + " and sort.bsifbookname='" +
                                        searchMap.get("bsifbookname") + "'";
                        }

                        if (searchMap.containsKey("bsifpublishname"))
                        {
                                hql = hql + " and info.bsifpublishname='" +
                                        searchMap.get("bsifpublishname") + "'";
                        }

                        if (searchMap.containsKey("tcsttotal"))
                        {
                                hql = hql + " and sort.tcsttotal=" +
                                        searchMap.get("tcsttotal");
                        }

                        if (searchMap.containsKey("bsifauthor"))
                        {
                                hql = hql = " and info.bsifauthor='" +
                                        searchMap.get("bsifauthor") + "'";
                        }

                        sum = count(hql, null);
                }
                catch (Exception e)
                {
                        log.error("error of the search count!!");
                        e.printStackTrace();
                }

                return sum;
        }

        //合计库存金额SELECT sum(tcsttotal) FROM DB2ADMIN.M_TEACHSORT;
        public Float sumTotal()
        {
                Float sum = new Float(0);
                Query q = null;

                try
                {
                        q = createQuery("select sum(sort.tcsttotal) from MTeachsort sort");

                        List list = q.list();
                        sum = new Float(list.get(0).toString());
                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }

                return sum;
        }

        //合计数量SELECT sum(tcstquantity) FROM DB2ADMIN.M_TEACHSORT;
        public Integer sumQuantity()
        {
                Integer sum = new Integer(0);
                Query q = null;

                try
                {
                        q = createQuery(
                                "select sum(sort.tcstquantity) from MTeachsort sort");

                        List list = q.list();
                        sum = new Integer(list.get(0).toString());
                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }

                return sum;
        }

        //infoid基本教材id组为条件，quantity实际出库数量
        public boolean isOutQuantity(String[] infoid, int quantity)
        {
                for (int i = 0; (null != infoid) && (i < infoid.length); i++)
                {
                        try
                        {
                                List list = null;
                                list = find(
                                        "select sort.tcstquantity from MTeachsort sort where sort.bsifid=" +
                                                infoid[i]);

                                if ((list != null) && (list.size() > 0))
                                {
                                        Integer tcst = (Integer) list.get(0);

                                        if (quantity > tcst.intValue())
                                        {
                                                return true;
                                        }
                                }
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }

                return false;
        }

        /*
        public List Test() {
                List list = null;
                Query q = createPageQuery();
                try {
                        list = list(1,5, q);
                        //list = q.list();
                        System.out.println(list.size());
                }
                catch(Exception e) {
                        e.printStackTrace();
                }
                finally {
                        try {
                                super.closeSession();
                        } catch (HibernateException e) {
                                e.printStackTrace();
                        }
                }
                return list;
        }*/
        public static void main(String[] args)
        {
                MTeachsortDAO dao = new MTeachsortDAO();
                System.out.println(dao.isOutQuantity(new String[]{"41", "46"}, 48));
        }
}
