package com.ulearning.ulms.content.schoolbook.model.dao;

import com.ulearning.ulms.content.schoolbook.model.base.BaseMTeachbeseinfoTabDAO;
import com.ulearning.ulms.content.schoolbook.util.PageWrapper;

import net.sf.hibernate.Criteria;
import net.sf.hibernate.HibernateException;
import net.sf.hibernate.expression.Criterion;
import net.sf.hibernate.expression.Expression;
import net.sf.hibernate.expression.Order;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 * <p/>
 * This is the object class that relates to the M_TEACHBESEINFO_TAB table.
 * Any customizations belong here.
 */
public class MTeachbeseinfoTabDAO extends BaseMTeachbeseinfoTabDAO
{
        private static final Log log = LogFactory.getLog(MTeachbeseinfoTabDAO.class);

        //统计总数
        public MTeachbeseinfoTabDAO()
        {
                try
                {
                        initialize();
                }
                catch (Exception e)
                {
                        log.error("inside initialize e:" + e.toString());
                }
        }

        public int countSum()
        {
                String hsql = "from MTeachbeseinfoTab mb";
                int sum = 0;
                sum = count(hsql, null);

                return sum;
        }

        public PageWrapper getPage(String index, String count)
        {
                log.debug("single page");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);
                List list = list(countPerPage, currentPage, null, null);

                //System.out.println(list.size());
                PageWrapper page = PageWrapper.getPage(index, countPerPage, countSum());
                page.setList(list);

                return page;
        }

        public PageWrapper getPage(String index, String count,
                                   Criterion[] condictions, Order[] orders)
        {
                //Criterion cr = Expression.eq("","");
                log.debug("search page");

                int currentPage = ((index == null) || index.equals("null")) ? 1
                        : Integer.parseInt(index);
                int countPerPage = ((count == null) || count.equals("null")) ? 5
                        : Integer.parseInt(count);
                List list = list(countPerPage, currentPage, condictions, orders);

                //System.out.println("================" + list.size() + "==================");
                PageWrapper page = PageWrapper.getPage(index, countPerPage,
                        searchCountsum(condictions));
                page.setList(list);

                return page;
        }

        private int searchCountsum(Criterion[] condictions)
        {
                try
                {
                        List list = null;
                        Criteria c = super.createCriteria();

                        for (int i = 0; (condictions != null) && (i < condictions.length);
                             i++)
                        {
                                c.add(condictions[i]);
                        }

                        list = c.setCacheable(true).list();

                        if (list != null)
                        {
                                return list.size();
                        }
                }
                catch (Exception ex)
                {
                        log.error("RootDAO list error !!", ex);
                }
                finally
                {
                        try
                        {
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }

                return 0;
        }

        /*
          public static void main(String args[]) {
                  MTeachbeseinfoTabDAO mtd = new MTeachbeseinfoTabDAO();
                  Criterion[] c = new Criterion[]{Expression.eq("bsifbookname", "dfdd")};
                  mtd.getPage(null, null, c, null);
          }
        */
}
