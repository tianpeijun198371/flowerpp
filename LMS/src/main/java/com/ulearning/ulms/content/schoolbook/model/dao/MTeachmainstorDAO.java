package com.ulearning.ulms.content.schoolbook.model.dao;

import com.ulearning.ulms.content.schoolbook.model.MTeachmainstor;
import com.ulearning.ulms.content.schoolbook.model.MTeachstorItemTab;
import com.ulearning.ulms.content.schoolbook.model.base.BaseMTeachmainstorDAO;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 * <p/>
 * This is the object class that relates to the M_TEACHMAINSTOR table.
 * Any customizations belong here.
 */
public class MTeachmainstorDAO extends BaseMTeachmainstorDAO
{
        private static final Log log = LogFactory.getLog(MTeachmainstorDAO.class);
        private static final MTeachstorItemTabDAO item = MTeachstorItemTabDAO.getInstance();

        public MTeachmainstorDAO()
        {
                log.debug("initialize!!");

                try
                {
                        initialize();
                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }
        }

        /*
          public static void main(String args[]) {
                  MTeachmainstorDAO md = new MTeachmainstorDAO();
                  md.audit(new String[]{"24", "25"}, "admin");
          }
        */
        public void audit(String[] ids, String tcmainaudman)
        {
                log.debug("inside audit!!");

                Session s = null;
                Transaction tx = null;

                try
                {
                        s = getSession();
                        tx = s.beginTransaction();

                        for (int i = 0; (ids != null) && (i < ids.length); i++)
                        {
                                Integer mstorId = item.load(Long.parseLong(ids[i]), s)
                                        .getTcmainid();
                                MTeachmainstor mstor = load(mstorId.intValue(), s);
                                s.flush();
                                mstor.setTcmainaudmark(new Integer(1));
                                mstor.setTcmainaudman(tcmainaudman);
                                update(mstor, s);
                                s.flush();
                        }

                        tx.commit();
                }
                catch (Exception e)
                {
                        if (null != tx)
                        {
                                try
                                {
                                        tx.rollback();
                                }
                                catch (HibernateException e1)
                                {
                                        log.error("rollback!!", e1);
                                        System.out.println(
                                                "error of audit, Transaction rollback and Exception is: " +
                                                        e);
                                }
                        }

                        System.out.println("audit Exception:\r\n" + e);
                }
                finally
                {
                        try
                        {
                                //s.disconnect();
                                super.closeSession();
                        }
                        catch (HibernateException e)
                        {
                                e.printStackTrace();
                        }
                }
        }
}
